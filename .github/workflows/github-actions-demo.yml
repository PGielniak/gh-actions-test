name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  push:
    branches:
      - main
    paths:
      - '**/*'  # Trigger on all files
      - '!.github/**'
      - '!actions/**'   # Exclude folder_to_exclude folder
      - '!*.md'  # Exclude all markdown files

  workflow_dispatch:
    inputs:
      environments:
        description: 'The message to display'
        required: true
        default: 'dev,npe,prod2'


jobs:

  SET_DEFAULTS:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set default environments
        id: set_defaults
        run: |
          # If no environments are provided, use a default value
          if [ -z "${{ github.event.inputs.environments }}" ]; then
            echo "ENVIRONMENT ARE EMPTY, SETTING DEFAULT VALUE"
            echo "environments=dev,npe,prod1,prod2" >> $GITHUB_ENV
            echo "environments=dev,npe,prod1,prod2" >> $GITHUB_OUTPUT
          else
            echo "PROVIDED ENVIRONMENTS: ${{ github.event.inputs.environments }} "
            echo "environments=${{ github.event.inputs.environments }}" >> $GITHUB_ENV
            echo "environments=${{ github.event.inputs.environments }}" >> $GITHUB_OUTPUT
          fi
  CI:
    needs: SET_DEFAULTS
    uses: ./.github/workflows/ci.yml
    with:
        message: "Hello from CI"

  CD_DEV:
    needs: CI
    if: ${{ contains(needs.set-defaults.outputs.environments, 'dev') }}
    # runs-on: ubuntu-latest
    uses: ./.github/workflows/cd.yml
    with:
        message: "Hello from CD_DEV"
        env_prep_msg: "hello DEV with approva; env prep"
        environment: dev

  CD_NPE:
    needs: CD_DEV
    if: ${{ contains(needs.set-defaults.outputs.environments, 'npe') }}
    # runs-on: ubuntu-latest
    uses: ./.github/workflows/cd.yml
    with:
        message: "Hello from CD_NPE"
        env_prep_msg: "hello NPE env prep"
        environment: npe

  CD_PROD1:
    needs: CD_NPE
    if: ${{ contains(needs.set-defaults.outputs.environments, 'prod1') }}
    uses: ./.github/workflows/cd.yml
    with:
        message: "Hello from CD_PROD1"
        env_prep_msg: "hello prod env prep"
        environment: prod1

  CD_PROD2:
    needs: CD_NPE
    if: ${{ contains(needs.set-defaults.outputs.environments, 'prod2') }}
    uses: ./.github/workflows/cd.yml
    with:
        message: "Hello from CD_PROD2"
        env_prep_msg: "hello prod2 env prep"
        environment: prod2


    # - uses: ./.github/workflows/ci.yml
    #   with:
    #     message: "Hello from Next step"